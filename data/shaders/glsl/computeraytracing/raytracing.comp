// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

#define EPSILON 0.0001
#define MAXLEN 1000.0

struct Camera 
{
	vec3 pos;   
	vec3 lookat;
	float fov; 
};

layout (binding = 1) uniform UBO 
{
	vec3 lightPos;
	float aspectRatio;
	vec4 fogColor;
	Camera camera;
	mat4 rotMat;
} ubo;


struct Triangle 
{
	vec4 v1;
	vec4 v2;
	vec4 v3;
	vec4 diffuse;
	float radius;
	float specular;
	int id;
};




layout (std140, binding = 2) buffer Triangles
{
	Triangle triangles[ ];
};


bool triangleIntersect(vec3 o, vec3 d, Triangle tri) {
	vec3 v0 = tri.v1.xyz;
	vec3 v1 = tri.v2.xyz; 
	vec3 v2 = tri.v3.xyz;
	vec3 e1,e2,h,s,q;
	float a,f,u,v;
	e1 = v1 - v0; //vector(e1,v1,v0);
	e2 = v2 - v0; // vector(e2,v2,v0);

	h = cross(d,e2); 
	a = dot(e1,h); 
	
	

	if (a > -0.00001 && a < 0.00001)
		return(false);

	f = 1/a;
	s = o - v0;//vector(s,o,v0);
	u = f * dot(s,h); 

	if (u < 0.0 || u > 1.0)
		return(false);

	q = cross(s,e1);//crossProduct(q,s,e1);
	v = f * dot(d,q);

	if (v < 0.0 || u + v > 1.0)
		return(false);

	float t = f * dot(e2,q);//t = f * innerProduct(e2,q);

	if (t > 0.00001) // ray intersection
		return(true);

	else // this means that there is a line intersection
		 // but not a ray intersection
		 return (false);

}

int intersect(in vec3 rayO, in vec3 rayD, inout float resT)
{
	int id = -1;

	for (int i=0; i<triangles.length(); i++){
		bool hit = triangleIntersect(rayO, rayD, triangles[i]);
		if (hit)
			id = triangles[i].id;
	}
	
	return id;
}

vec3 renderScene(inout vec3 rayO, inout vec3 rayD, inout int id)
{
	vec3 color = vec3(0.0);
	float t = MAXLEN;

	// Get intersected object ID
	int objectID = intersect(rayO, rayD, t);
	
	if (objectID == -1)
	{
		return color;
	}
	
	vec3 pos = rayO + t * rayD;
	vec3 lightVec = normalize(ubo.lightPos - pos);				
	vec3 normal;

	for (int i = 0; i < triangles.length(); i++)
	{
		if (objectID == triangles[i].id)
		{
			color = vec3(1.0,1.0, 1.0);
		}
	}

	if (id == -1)
		return color;

	id = objectID;

	
	return color;
}

void main()
{
	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	vec3 rayO = ubo.camera.pos;
	vec3 rayD = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ubo.aspectRatio, 1.0), -1.0));
		
	// Basic color path
	int id = 0;
	vec3 finalColor = renderScene(rayO, rayD, id);

			
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 0.0));
}